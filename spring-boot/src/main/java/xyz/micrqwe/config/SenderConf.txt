package xyz.micrqwe.config;

import org.springframework.amqp.core.Binding;
import org.springframework.amqp.core.BindingBuilder;
import org.springframework.amqp.core.Queue;
import org.springframework.amqp.core.TopicExchange;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class SenderConf {
    /**
     * 结合HelloReceive指定队列进行监听消息
     * @return
     */
    @Bean
    public Queue queue() {
        return new Queue("queue");
    }

    // ==========================================================
    // 指定交换机进行获取信息。监听的进行单独指定
    @Bean(name="message")
    public Queue queueMessage() {
        return new Queue("topic.message");
    }

    @Bean(name="messages")
    public Queue queueMessages() {
        return new Queue("topic.messages");
    }

    @Bean
    public TopicExchange exchange() {
        return new TopicExchange("exchange");
    }

    /**
     * topic.message 往topic.message发送 那么topic.#也会接收到
     * @param queueMessage
     * @param exchange
     * @return
     */
    @Bean
    Binding bindingExchangeMessage(@Qualifier("message") Queue queueMessage, TopicExchange exchange) {
        // .with 指定这个交换机给该队列使用
        // indingBuilder.bind(queueMessage).to(exchange); B
        // 不加with则监听了该交换机使用的队列的方法，都会收到消息。
        return BindingBuilder.bind(queueMessage).to(exchange).with("topic.message");
    }

    @Bean
    Binding bindingExchangeMessages(@Qualifier("messages") Queue queueMessages, TopicExchange exchange) {
        // BindingBuilder.bind(queueMessage).to(exchange);
        return BindingBuilder.bind(queueMessages).to(exchange).with("topic.#");//*表示一个词,#表示零个或多个词
    }
    // =====================================================================================
}
