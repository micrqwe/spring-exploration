package xyz.micrqwe.controller;

import org.springframework.amqp.core.AmqpTemplate;
import org.springframework.amqp.core.MessagePostProcessor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import xyz.micrqwe.model.User;

import java.io.File;
import java.io.FileInputStream;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by shaowenxing on 2018/5/22.
 * 返回数据
 */
@RestController
@RequestMapping("message")
public class MessageController {
    @Autowired
    private AmqpTemplate template;

    /**
     * 指定发送给某一个队列
     *
     * @param str
     */
    @RequestMapping("queue")
    public String send(String str) {
        /**
         * 该队列事先需要在rabbitmq中建立起来，不然报错
         */
        template.convertAndSend("queue", str);
        return "success";
    }

    /**
     * 指定发送给某一个队列,发送给某一个交换机处理
     *
     * @param str
     */
    @RequestMapping("message")
    public String sendExchangeMessage(String str) {
        /**
         * 该队列事先需要在rabbitmq中建立起来，不然报错
         */
        template.convertAndSend("exchange", "topic.message", str);
        return "success";
    }

    /**
     * 指定发送给某一个队列,发送给某一个交换机处理
     *
     * @param str
     */
    @RequestMapping("messages")
    public String sendExchangeMessages(String str) {
    /*    Map<String, String> map = new HashMap<>();
        map.put("1", "33");
        map.put("2", "4");*/
        byte b[] = new byte[2];
        try {
            File file = new File("E:\\2.txt");
            FileInputStream fileInputStream = new FileInputStream(file);
            int len = -1;
            int i = 1;
            while ((len = fileInputStream.read(b)) != -1) {
                User user = new User();
                user.setName("s:" + i);
                user.setAge("11" + i);
                user.setDate(new Date());
                user.setB(b);
                template.convertAndSend("exchange", "topic.messages", user);
                i++;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        /**
         * 该队列事先需要在rabbitmq中建立起来，不然报错
         */
//        MessagePostProcessor messagePostProcessor  =

        return "success";
    }

    @RequestMapping("test")
    public String test() {
        return "cc";
    }


}
